import { useState } from "react"
import { getDocument, GlobalWorkerOptions } from 'pdfjs-dist/build/pdf'
import workerSrc from 'pdfjs-dist/build/pdf.worker.mjs?url'
import { conciseSummary } from "../utils/summarizer"
import { scoreSimilarity } from "../utils/searchUtils"

// Use bundled worker URL (more reliable than CDN/CORS in Vite)
GlobalWorkerOptions.workerSrc = workerSrc

async function readPdfText(file) {
  const buf = await file.arrayBuffer()
  const pdf = await getDocument({ data: buf }).promise
  let text = ''
  for (let i = 1; i <= pdf.numPages; i++) {
    try {
      const page = await pdf.getPage(i)
      const content = await page.getTextContent()
      const strings = content.items.map(it => it.str)
      text += strings.join(' ') + '\n'
    } catch (e) {
      // skip problematic page
      // eslint-disable-next-line no-console
      console.warn('PDF parse warning on page', i, e)
    }
  }
  return text
}

export default function UploadSummarize({ corpus, onAddToBoard }) {
  const [status, setStatus] = useState('')
  const [fileName, setFileName] = useState(() => {
    try {
      return localStorage.getItem('upload_filename') || ''
    } catch {
      return ''
    }
  })
  const [isExpanded, setIsExpanded] = useState(() => {
    try {
      const saved = localStorage.getItem('upload_expanded')
      return saved === 'true'
    } catch {
      return true
    }
  })
  const [summary, setSummary] = useState(() => {
    try {
      const saved = localStorage.getItem('upload_summary')
      return saved ? JSON.parse(saved) : null
    } catch {
      return null
    }
  })
  const [recommendations, setRecommendations] = useState(() => {
    try {
      const saved = localStorage.getItem('upload_recommendations')
      return saved ? JSON.parse(saved) : []
    } catch {
      return []
    }
  })

  const handleFiles = async (files) => {
    if (!files?.length) return
    const f = files[0]
    setFileName(f.name)
    localStorage.setItem('upload_filename', f.name)
    setStatus('Parsing...')
    let text = ''
    if (f.type === 'application/pdf' || f.name.toLowerCase().endsWith('.pdf')) {
      try { 
        text = await readPdfText(f) 
        if (!text || text.trim().length < 20) {
          setStatus('Parsed PDF but no selectable text (scanned image?). Please try a text PDF or TXT.')
          return
        }
      } catch { setStatus('Failed to parse PDF'); return }
    } else {
      text = await f.text()
    }
    setStatus('Summarizing with AI...')
    let summaryData = null
    let usedAI = false
    try {
      const res = await fetch('http://localhost:8000/api/summarize', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ text, max_bullets: 3 })
      })
      if (!res.ok) {
        const errText = await res.text()
        console.error('API error:', res.status, errText)
        throw new Error(`API call failed: ${res.status}`)
      }
      summaryData = await res.json()
      usedAI = true
      console.log('✅ AI summarization successful')
      console.log('AI Response:', summaryData)
    } catch (e) {
      console.warn('AI summarization failed, using fallback:', e)
      setStatus('AI summarization unavailable, using fallback...')
      const fallback = conciseSummary(text, 3)
      summaryData = {
        tldr: fallback.tldr,
        objectives: fallback.bullets,
        science: [],
        timeline: [],
        keywords: fallback.keywords
      }
    }
    if (usedAI) setStatus('Summary generated by AI')
    setSummary(summaryData)
    localStorage.setItem('upload_summary', JSON.stringify(summaryData))
    
    setStatus('Finding similar studies...')
    const queryText = summaryData?.tldr || text.slice(0, 500)
    const scored = (corpus || []).map(p => ({ p, s: scoreSimilarity(queryText, `${p.title} ${p.outcome} ${p.organism}`) }))
      .sort((a,b)=>b.s-a.s)
      .slice(0, 5)
      .map(x => x.p)
    setRecommendations(scored)
    localStorage.setItem('upload_recommendations', JSON.stringify(scored))
    setStatus('')
  }
  
  const handleClear = () => {
    setSummary(null)
    setRecommendations([])
    setFileName('')
    localStorage.removeItem('upload_summary')
    localStorage.removeItem('upload_recommendations')
    localStorage.removeItem('upload_filename')
    setStatus('')
  }

  const toggleExpanded = () => {
    const newState = !isExpanded
    setIsExpanded(newState)
    localStorage.setItem('upload_expanded', newState.toString())
  }

  return (
    <div className="bg-slate-700 rounded-xl p-6">
      <div className="flex items-center justify-between mb-3">
        <div className="flex items-center gap-3">
          <h2 className="text-xl font-semibold">Upload & Summarize</h2>
          <button 
            onClick={toggleExpanded} 
            className="text-slate-400 hover:text-slate-200 transition"
            aria-label={isExpanded ? "Collapse" : "Expand"}
          >
            {isExpanded ? (
              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
              </svg>
            ) : (
              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
              </svg>
            )}
          </button>
        </div>
        {(summary || recommendations.length > 0) && (
          <button 
            onClick={handleClear} 
            className="px-3 py-1.5 text-sm bg-slate-600 hover:bg-slate-500 rounded"
          >
            Clear
          </button>
        )}
      </div>
      
      {isExpanded && (
        <>
          <div
            className="border border-dashed border-slate-500 rounded p-6 text-slate-300 text-sm hover:bg-slate-600/20 cursor-pointer"
            onDragOver={(e) => e.preventDefault()}
            onDrop={(e) => { e.preventDefault(); handleFiles(e.dataTransfer.files) }}
            onClick={() => {
              const input = document.createElement('input')
              input.type = 'file'
              input.accept = '.pdf,.txt,.md'
              input.onchange = (e) => handleFiles(e.target.files)
              input.click()
            }}
          >
            Drag & drop a PDF/TXT here, or click to select
          </div>
          {fileName && (
            <div className="mt-3 flex items-center gap-2 text-sm text-slate-300">
              <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 21h10a2 2 0 002-2V9.414a1 1 0 00-.293-.707l-5.414-5.414A1 1 0 0012.586 3H7a2 2 0 00-2 2v14a2 2 0 002 2z" />
              </svg>
              <span className="font-medium">{fileName}</span>
            </div>
          )}
          {status && <p className="text-xs text-slate-400 mt-2">{status}</p>}
          {summary && (
        <div className="mt-4 space-y-3">
          {summary.tldr && (
            <div>
              <h3 className="text-sm font-medium text-slate-300 mb-1">TL;DR</h3>
              <p className="text-slate-200 text-sm leading-6">{summary.tldr}</p>
            </div>
          )}
          {summary.objectives?.length > 0 && (
            <div>
              <h3 className="text-sm font-medium text-slate-300 mb-1">Mission Objectives</h3>
              <ul className="list-disc list-inside space-y-1 text-slate-200 text-sm">
                {summary.objectives.map((obj, i) => <li key={i}>{obj}</li>)}
              </ul>
            </div>
          )}
          {summary.science?.length > 0 && (
            <div>
              <h3 className="text-sm font-medium text-slate-300 mb-1">Scientific Focus</h3>
              <ul className="list-disc list-inside space-y-1 text-slate-200 text-sm">
                {summary.science.map((sci, i) => <li key={i}>{sci}</li>)}
              </ul>
            </div>
          )}
          {summary.timeline?.length > 0 && (
            <div>
              <h3 className="text-sm font-medium text-slate-300 mb-1">Timeline Highlights</h3>
              <ul className="list-disc list-inside space-y-1 text-slate-200 text-sm">
                {summary.timeline.map((time, i) => <li key={i}>{time}</li>)}
              </ul>
            </div>
          )}
          {summary.keywords?.length > 0 && (
            <div>
              <h3 className="text-sm font-medium text-slate-300 mb-1">Keywords</h3>
              <div className="flex flex-wrap gap-2">
                {summary.keywords.map((kw, i) => (
                  <span key={i} className="inline-flex items-center rounded-full bg-slate-600/60 text-slate-200 px-2 py-0.5 text-xs">
                    {kw}
                  </span>
                ))}
              </div>
            </div>
          )}
        </div>
      )}
          {recommendations.length > 0 && (
            <div className="mt-4">
              <h3 className="text-sm font-medium text-slate-300 mb-2">Similar Publications</h3>
              <div className="space-y-2">
                {recommendations.map((p, idx) => (
                  <div key={`${p.link}-${idx}`} className="bg-slate-600/40 rounded p-3">
                    <div className="flex items-start justify-between">
                      <div className="flex-1">
                        <div className="font-medium">{p.title}</div>
                        <div className="text-xs text-slate-300 mt-1">{p.year ?? 'n/a'} · {p.organism} · {p.outcome}</div>
                      </div>
                      {onAddToBoard && (
                        <button onClick={() => onAddToBoard(p)} className="text-xs bg-slate-700 hover:bg-slate-600 rounded px-2 py-1 ml-2">Add to Board</button>
                      )}
                    </div>
                    {p.link && (
                      <a 
                        href={p.link} 
                        target="_blank" 
                        rel="noopener noreferrer"
                        className="text-yellow-400 hover:text-yellow-300 underline text-xs inline-block mt-2"
                      >
                        View Publication →
                      </a>
                    )}
                  </div>
                ))}
              </div>
            </div>
          )}
        </>
      )}
    </div>
  )
}


